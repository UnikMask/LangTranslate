/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Transpire;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import net.sourceforge.argparse4j.inf.Namespace;

public class App {
    public String getGreeting() {
        return "Transpire v.1.0.0";
    }

	// App arguments - stored here for now
	static Prompt promptInstance = new Prompt();
	static App mainInstance_s;
	List<String> sourceFiles;
	String sourceLanguage;
	String targetLanguage;
	String progLanguage;
	String configDir;
	boolean appFlag = true;
	Boolean updateFlag;
	Boolean verboseFlag;


	public static void verboseLog(String msg) {
		if (mainInstance_s.verboseFlag) {
			System.out.println(msg);
		}
	}


	/**
	 * Get application wanted variables based on given arguments.
	 * @param args The app arguments.
	 * @return Whether the program is true or false.
	 */
	public boolean getArgsInApp(String[] args) {
		Namespace resn = promptInstance.launchPrompt(args);
		if (resn != null) {
			sourceFiles = (List<String>) resn.get("files");
			sourceLanguage = (String) resn.get("source language");
			targetLanguage = (String) resn.get("target language");
			progLanguage = (String) resn.get("programming language");
			updateFlag = (Boolean) resn.get("update");
			verboseFlag = (Boolean) resn.get("verboseOut");
			configDir = (String) resn.get("configDir");
			return true;
		}
		else {
			return false;
		}
	}


	/**
	 * Constructor for app.
	 * @param args The application parameters.
	 */
	public App(String[] args) {
		System.out.println(this.getGreeting());
		appFlag = getArgsInApp(args);
	}


	// Get file content from a string.
	public String getFileContent(String progFile) throws IOException {
		verboseLog("Reading content of " + progFile);
		StringBuilder contentBuild = new StringBuilder();

		try (BufferedReader br = new BufferedReader(new FileReader(progFile))) {
			String currline;
			while ((currline = br.readLine()) != null) {
				contentBuild.append(currline).append("\n");
			}
			return contentBuild.toString();
		}
		catch (IOException e) {
			System.out.println(e.getMessage());
			return null;
		}
	}


	// Write file from a string of content
	public boolean writeFile(String output, String fileDir) throws IOException {
		String fileName = new File(fileDir).getName();
		verboseLog("Writing translation of " + fileName + " to transpire/" + fileName);
		File outDir = new File("transpireOut");
		if (!outDir.exists()); {
			verboseLog("transpireOut/ doesn't exist! Creating it.");
			outDir.mkdir();
		}
		String newFileName = "transpireOut/" + fileName;
		try (FileWriter writer = new FileWriter(newFileName)){
			writer.write(output);
			return true;
		}
		catch(IOException e) {
			return false;
		}
	}


    public static void main(String[] args) {
        //Base: transpire Bonjour.java fr
        //Backend: transpire Bonjour.java -s fr -t en
        // --help

		App mainInstance = new App(args);
		mainInstance_s = mainInstance;
		if (mainInstance.appFlag) {
			Parser parser;
			try{
				Translations.updateTranslations(mainInstance.configDir,
												mainInstance.sourceLanguage,
												mainInstance.progLanguage,
												mainInstance.updateFlag);
				parser = new Parser(mainInstance.sourceLanguage,
									mainInstance.progLanguage);

				// Get String from file
				for (String file: mainInstance.sourceFiles) {
					String output = parser.parseString(mainInstance.getFileContent(file));
					if (!mainInstance.writeFile(output, file)){
						System.out.println("Io Exception on file write!");
						break;
					}
				}
			}catch(NotSupportedLanguage e){
				System.out.println(e.getMessage());
			}catch(IOException e) {
				System.out.println("Couldn't open file.");
			}
		}
    }
}
